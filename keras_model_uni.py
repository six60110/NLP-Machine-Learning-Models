# -*- coding: utf-8 -*-
"""Keras Model UNI

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/six60110/cc979e8b136122915d45a96562fb0f60/keras-model-uni.ipynb
"""

!pip install -qq transformers
!git clone https://c44b682684844fba39755cb34aff5a722a0d6f43@github.com/six60110/training_repo.git

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

np.set_printoptions(precision=3, suppress=True)

import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing

train_file = pd.read_csv(
      "/content/training_repo/train_en.tsv", sep='\t')
print(train_file.head())

# look at the test data set
test_file = pd.read_csv(
      "/content/training_repo/test_en.tsv", sep='\t')

file_text = train_file.text

vocab_size = 10000
embedding_dim = 16
maxlength = 100
trunc_type='post'
padding_type='post'
oov_tok = "<OOV>"
training_size = 20000

tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)
tokenizer.fit_on_texts(file_text)
word_index = tokenizer.word_index

sequences = tokenizer.texts_to_sequences(file_text)
padded = pad_sequences(sequences, padding='post')

training_sentences = file_text[0:training_size]
testing_sentences = file_text[training_size:]

training_id = train_file.HS[0:training_size]
testing_id = train_file.HS[training_size:]



training_sequences = tokenizer.texts_to_sequences(training_sentences)
training_padded = pad_sequences(training_sequences, maxlen=maxlength,
                                padding=padding_type, truncating=trunc_type)

testing_sequences = tokenizer.texts_to_sequences(testing_sentences)
testing_padded = pad_sequences(testing_sequences, maxlen=maxlength,
                               padding=padding_type, truncating=trunc_type)

model = tf.keras.Sequential([
                             tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=maxlength),
                             tf.keras.layers.GlobalAveragePooling1D(),
                             tf.keras.layers.Dense(24, activation='relu'),
                             tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(loss='binary_crossentropy',optimizer='adam' ,metrics=['accuracy'])

num_epochs = 100

def plot_graphs(history, string):
  plt.plot(history.history[string])
  plt.plot(history.history['val_'+string])
  plt.xlabel("Epochs")
  plt.ylabel(string)
  plt.legend([string, 'val_'+string])
  plt.show()

history = model.fit(training_padded, training_id, epochs=num_epochs,
                    validation_data=(testing_padded, testing_id), verbose=2)

plt.plot()
plot_graphs(history, "accuracy")
plot_graphs(history, "loss")





#sequences = tokenizer.texts_to_sequences(file_text)
#padded = pad_sequences(sequences, padding='post')

